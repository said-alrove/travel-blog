//************************
//* LESSIER 1.4
//************************

//************************
//* BUILT-IN MODULES
//************************
@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:selector';
@use 'sass:string';
@use 'sass:color';

//************************
//* CSS GRID
//************************ 
@mixin grid
(
    $rows: false, 
    $cols: false, 
    $flow: false, 
    $auto-rows: false, 
    $auto-cols: false,  
    $plc-items: false, 
    $jt-items: false, 
    $al-items: false, 
    $plc-content: false,
    $jt-content: false, 
    $al-content: false, 
    $row-gap: false, 
    $col-gap: false,
    $gap: false
) 
{
    display: grid;
    @if $rows and $cols {
        grid: $rows / $cols;
    } @else if $rows {
        grid-template-rows: $rows;
    } @else if $cols {
        grid-template-columns: $cols;
    }

    @if $flow { grid-auto-flow: $flow; }
    
    @if $auto-rows { grid-auto-rows: $auto-rows; }

    @if $auto-cols { grid-auto-columns: $auto-cols; }

    @if $plc-items {
        place-items: $plc-items;
    } @else if $jt-items and $al-items {
        @error 'You are trying to use the $jt-items and $al-items arguments individually instead of using the shorthand $plc-items for fewer code';
    } @else if $jt-items {
        justify-items: $jt-items;
    } @else if $al-items {
        align-items: $al-items;
    }

    @if $plc-content {
        place-content: $plc-content;
    } @else if $jt-content and $al-content {
        @error 'You are trying to use the $jt-content and $al-content arguments individually instead of using the shorthand $plc-content for fewer code';
    } @else if $jt-content {
        justify-content: $jt-content;
    } @else if $al-content {
        align-content: $al-content;
    }

    @if $gap { 
        gap: $gap; 
    } @else if $row-gap {
        row-gap: $row-gap;
    } @else if $col-gap {
        column-gap: $col-gap;
    }
}

//************************
//* CSS FLEXBOX
//************************
@mixin flexbox
(
    $dir: false, 
    $wrap: false, 
    $jt-content: false, 
    $al-items: false,
    $gap: false
)
{
    display: flex;
    @if $dir and $wrap {
        flex-flow: $dir $wrap;
    } @else if $dir {
        flex-direction: $dir;
    } @else if $wrap {
        flex-wrap: $wrap;
    }

    @if $jt-content { justify-content: $jt-content; }

    @if $al-items { align-items: $al-items; }

    @if $gap { gap: $gap; }
}

//************************
//* PSEUDO-ELEMENT
//************************
@mixin pseudo-element
(
    $loc: before, 
    $cont: '',
    $pos: absolute,
    $inset: false,
    $top: 0,
    $bottom: 0,
    $left: 0,
    $right: 0
) 
{
    position: relative;
    &::#{$loc} {
        content: $cont;
        position: $pos;
        @if $inset {
            inset: $inset;
        } @else if $inset == false {
            inset: $top $right $bottom $left;
        }
        @content;
    }
}

//************************
//* SUPPORT
//************************ 
@mixin support
(
    $property: false, 
    $value: false, 
    $support: false,
    $args...
) 
{
    #{$property}: $value;
    @supports not (#{$property}: $value) {
        #{$property}: $value; 
        @if $support {
            @each $key, $prefix in meta.keywords($args) {
                -#{$prefix}-#{$property}: $value;
            }
        } @else if $support != true {
            -webkit-#{$property}: $value;
            -moz-#{$property}: $value;
            -ms-#{$property}: $value;
            -o-#{$property}: $value;
        }
    }
}

//************************
//* SHADOW
//************************
@mixin shadow
(
    $type: box,
    $x-axis: 0, 
    $y-axis: 0, 
    $blur: 0, 
    $spread: 0, 
    $color: #000, 
) 
{
    @if $type == 'box' {
        #{$type}-shadow: $x-axis $y-axis $blur $spread $color;
    } @else if $type == 'text' {
        #{$type}-shadow: $x-axis $y-axis $blur $color;
    } @else {
        @error '#{$type} is an unknown value, try using either box or text for creating shadows';
    }
}

//************************
//* MEDIA QUERIES
//************************
$screen-sizes: 
(
    'smartphone': (
        'sm': 480px,
        'md': 552px,
    ),
    'tablet': (
        'sm': 768px,
        'md': 912px,
        'lg': 1080px
    ),
    'desktop': (
        'sm': 1212px,
        'md': 1440px
    )
);

@mixin query
(
    $type: min-width, 
    $device: false, 
    $size: false
) 
{
    $screen: map.get($screen-sizes, $device, $size); 
    @media (#{$type}: $screen) { @content; }

    @if $device == false { 
        @error 'You have not given an available device value for your media query yet'; 
    } @else if $size == false {
        @error 'You have not given an available screen size for your media query yet';
    }
}

//************************
//* BOX-MODEL
//************************
@mixin box() {
    $selector: selector.parse(&);
    $parent-1: selector.parse('html');
    $parent-2: selector.parse('*');

    @if $parent-1 == $selector {
        box-sizing: border-box;
    } @else if $parent-2 == $selector {
        &,
        &::before,
        &::after { box-sizing: inherit; }
    } @else {
        @error 'You are trying to parse this mixin within a selector that is neither #{$parent-1} or #{$parent-2}';
    }
}

//************************
//* COMING SOON...
//************************